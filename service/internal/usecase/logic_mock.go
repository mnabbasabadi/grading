// Code generated by MockGen. DO NOT EDIT.
// Source: logic.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/mnabbasabadi/grading/service/shared/domain"
)

// MockLogic is a mock of Logic interface.
type MockLogic struct {
	ctrl     *gomock.Controller
	recorder *MockLogicMockRecorder
}

// MockLogicMockRecorder is the mock recorder for MockLogic.
type MockLogicMockRecorder struct {
	mock *MockLogic
}

// NewMockLogic creates a new mock instance.
func NewMockLogic(ctrl *gomock.Controller) *MockLogic {
	mock := &MockLogic{ctrl: ctrl}
	mock.recorder = &MockLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogic) EXPECT() *MockLogicMockRecorder {
	return m.recorder
}

// GetGrades mocks base method.
func (m *MockLogic) GetGrades(ctx context.Context, scaleType domain.ScaleType, limit, offset int) ([]domain.GradeWithGPA, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrades", ctx, scaleType, limit, offset)
	ret0, _ := ret[0].([]domain.GradeWithGPA)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGrades indicates an expected call of GetGrades.
func (mr *MockLogicMockRecorder) GetGrades(ctx, scaleType, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrades", reflect.TypeOf((*MockLogic)(nil).GetGrades), ctx, scaleType, limit, offset)
}
