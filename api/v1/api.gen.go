// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for ScaleType.
const (
	ScaleTypeECTS ScaleType = "ECTS"
	ScaleTypeN10  ScaleType = "10"
	ScaleTypeN4   ScaleType = "4"
	ScaleTypeN43  ScaleType = "4.3"
	ScaleTypeN5   ScaleType = "5"
	ScaleTypeN7   ScaleType = "7"
)

// Defines values for GetGPAParamsScaleType.
const (
	GetGPAParamsScaleTypeECTS GetGPAParamsScaleType = "ECTS"
	GetGPAParamsScaleTypeN10  GetGPAParamsScaleType = "10"
	GetGPAParamsScaleTypeN4   GetGPAParamsScaleType = "4"
	GetGPAParamsScaleTypeN43  GetGPAParamsScaleType = "4.3"
	GetGPAParamsScaleTypeN5   GetGPAParamsScaleType = "5"
	GetGPAParamsScaleTypeN7   GetGPAParamsScaleType = "7"
)

// Grade defines model for Grade.
type Grade struct {
	// CourseId course name
	CourseId string `json:"course_id"`

	// Gpa grade point average
	Gpa string `json:"gpa"`

	// Grade grade
	Grade string `json:"grade"`

	// StudentId student id
	StudentId string `json:"student_id"`
}

// GradeList defines model for GradeList.
type GradeList struct {
	Grades []Grade `json:"grades"`

	// Pagination pagination for response
	Pagination *Pagination `json:"pagination,omitempty"`
}

// Pagination pagination for response
type Pagination struct {
	// Limit number of items per page
	Limit int `json:"limit"`

	// Offset number of items to skip
	Offset int `json:"offset"`

	// Total total number of items
	Total int `json:"total"`
}

// ResponseError defines model for ResponseError.
type ResponseError struct {
	// Error error message
	Error *string `json:"error,omitempty"`
}

// ScaleType defines model for ScaleType.
type ScaleType string

// LimitQuery defines model for limitQuery.
type LimitQuery = int

// OffsetQuery defines model for offsetQuery.
type OffsetQuery = int

// GPAResponse defines model for GPAResponse.
type GPAResponse = GradeList

// GetGPAParams defines parameters for GetGPA.
type GetGPAParams struct {
	// ScaleType scale type
	ScaleType *GetGPAParamsScaleType `form:"scale_type,omitempty" json:"scale_type,omitempty"`

	// Limit the maximum number of items to return
	Limit *LimitQuery `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset the number of results to skip
	Offset *OffsetQuery `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetGPAParamsScaleType defines parameters for GetGPA.
type GetGPAParamsScaleType string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetLiveness request
	GetLiveness(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReadiness request
	GetReadiness(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGPA request
	GetGPA(ctx context.Context, params *GetGPAParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetLiveness(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLivenessRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReadiness(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReadinessRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGPA(ctx context.Context, params *GetGPAParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGPARequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetLivenessRequest generates requests for GetLiveness
func NewGetLivenessRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/live")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReadinessRequest generates requests for GetReadiness
func NewGetReadinessRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ready")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGPARequest generates requests for GetGPA
func NewGetGPARequest(server string, params *GetGPAParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/students/gpa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ScaleType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scale_type", runtime.ParamLocationQuery, *params.ScaleType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetLiveness request
	GetLivenessWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLivenessResponse, error)

	// GetReadiness request
	GetReadinessWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReadinessResponse, error)

	// GetGPA request
	GetGPAWithResponse(ctx context.Context, params *GetGPAParams, reqEditors ...RequestEditorFn) (*GetGPAResponse, error)
}

type GetLivenessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLivenessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLivenessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReadinessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetReadinessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReadinessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGPAResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GradeList
	JSON400      *ResponseError
	JSON404      *ResponseError
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r GetGPAResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGPAResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetLivenessWithResponse request returning *GetLivenessResponse
func (c *ClientWithResponses) GetLivenessWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLivenessResponse, error) {
	rsp, err := c.GetLiveness(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLivenessResponse(rsp)
}

// GetReadinessWithResponse request returning *GetReadinessResponse
func (c *ClientWithResponses) GetReadinessWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReadinessResponse, error) {
	rsp, err := c.GetReadiness(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReadinessResponse(rsp)
}

// GetGPAWithResponse request returning *GetGPAResponse
func (c *ClientWithResponses) GetGPAWithResponse(ctx context.Context, params *GetGPAParams, reqEditors ...RequestEditorFn) (*GetGPAResponse, error) {
	rsp, err := c.GetGPA(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGPAResponse(rsp)
}

// ParseGetLivenessResponse parses an HTTP response from a GetLivenessWithResponse call
func ParseGetLivenessResponse(rsp *http.Response) (*GetLivenessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLivenessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReadinessResponse parses an HTTP response from a GetReadinessWithResponse call
func ParseGetReadinessResponse(rsp *http.Response) (*GetReadinessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReadinessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGPAResponse parses an HTTP response from a GetGPAWithResponse call
func ParseGetGPAResponse(rsp *http.Response) (*GetGPAResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGPAResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GradeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get liveness status
	// (GET /live)
	GetLiveness(w http.ResponseWriter, r *http.Request)
	// Get readiness status
	// (GET /ready)
	GetReadiness(w http.ResponseWriter, r *http.Request)
	// Get GPA
	// (GET /students/gpa)
	GetGPA(w http.ResponseWriter, r *http.Request, params GetGPAParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLiveness(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetReadiness operation middleware
func (siw *ServerInterfaceWrapper) GetReadiness(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReadiness(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGPA operation middleware
func (siw *ServerInterfaceWrapper) GetGPA(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGPAParams

	// ------------- Optional query parameter "scale_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "scale_type", r.URL.Query(), &params.ScaleType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scale_type", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGPA(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/live", wrapper.GetLiveness)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ready", wrapper.GetReadiness)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/students/gpa", wrapper.GetGPA)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWW2/bNhT+K8TZ3kZY8pygnd68oTAKdIOX9C0ICtY6ttlJFEtSQQND/304pGTd6MQI",
	"+ibq3L7znQt5gl1V6kqhchayE2hhRIkOjT/d70SBn5810iFHuzNSO1kpyMCSiDmScZD053uN5hk4KFFi",
	"p/ClVbC7I5aCvKCqS8gebvjNYsVv+TLl7zh8+OvzPTxy8NoZWGekOkDTcChkKd2/3vMMgjsiK8UPWdYl",
	"U3X5FQ2r9kw6LC1zFTPoaqMuoPN+R8By3Iu6cJAtUw74Q5S6wHBoY9CBTlK1pzNeqRwe0HjA1X5v8SXE",
	"PVKDti6cx2r/k/oC0uAwDnWIdAgtjUBrOBi0ulIWfW032/Vde6bjrlIOlaNPoXUhd4IwJ98sAT8Ngv9q",
	"cA8Z/JL0jZMEqU02RuT4SVoX4o2T32zX7Byx4dB9fzCmMj8NwthrBIZQDEnGzBlL05EbiKEkfKt21BK0",
	"2hBP8LdwR+Bw0AIyWP9Gn0Ed/lhSUtpUGo2TgeNg9kXm81YIIuaLPGv8NsDUxodiupLKMfGERhzI9gwT",
	"/ox66tKJ+BparxbvItbW1TkqF02hlTGZQ2x0DX6vpcEcsocBESOX/AyD8u0XQPX1G+4cxe87alwQb2ch",
	"e7i6No8ctDhIJQL6U7sC/IS3M+bnpnKi8KPezMrZBT2BXzJXTQMl0WYljBHPvklGOF5yse01p5S2YGKk",
	"bUf+x0XrY7P9cAimubbsTM2ne1ajYXrSh8vI+uk5fs1jvw2Hq23ury3UbMXS7+l1MEaXRhf3kNvudjjv",
	"3hAsxvVsi41pxO73GGXYQCVaG7ibT88kEP2Sal+RKyedH3fqL6kObL39CBye0NjgfLlIF6mnXKMSWkIG",
	"q0W6WFGNhTt6XEkhn8IgxWqyQcdIQaG1zDrhaqKQ8vKd8zEPOp9aFZhcLb+n6dwnKROo23Q1F/5ThYBh",
	"F9dlKej6vIDDiQNNfrdILDySVWJQ5M8vpkQa8pWc7jqdq5K68zFfyiqgmqcVwXIhr+6YtHfCxfTogqWZ",
	"FuxAnLHWMJblZrv23dA/9h7ii6hXSfrHYMNfVR68267QHj6aaFHHiI+5OOslw9dMw+HmGpvJU4Gsbt5g",
	"dfuGWLN2CAWJdQCponnqijQue1HtRMGCHDjUpoAMjs7pLEm87FhZl71P36ee19b/1Mt9e5Gf28QOnvEd",
	"FCrjpOf8cyRm1N5NzWPzfwAAAP//6UuAC2AMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
